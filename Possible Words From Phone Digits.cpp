//Given a keypad as shown in the diagram, and an array arr[ ], your task is to list all possible words in any order which can be generated by pressing numbers from array.



#include <bits/stdc++.h>
using namespace std;

class Solution {
public:
    void generateWords(vector<int> &arr, int index, string &current, vector<string> &result, unordered_map<int, string> &keypad) {
        // Base Case: If we have processed all digits
        if (index == arr.size()) {
            result.push_back(current);
            return;
        }
        
        // Get the letters corresponding to the current digit
        string letters = keypad[arr[index]];
        
        // Recursively form words using each letter
        for (char ch : letters) {
            current.push_back(ch);
            generateWords(arr, index + 1, current, result, keypad);
            current.pop_back(); // Backtrack
        }
    }

    vector<string> possibleWords(vector<int> &arr) {
        vector<string> result;
        if (arr.empty()) return result;
        
        // Keypad Mapping
        unordered_map<int, string> keypad = {
            {2, "abc"}, {3, "def"}, {4, "ghi"}, {5, "jkl"},
            {6, "mno"}, {7, "pqrs"}, {8, "tuv"}, {9, "wxyz"}
        };
        
        string current;
        generateWords(arr, 0, current, result, keypad);
        
        return result;
    }
};

// Driver Code
int main() {
    int t;
    scanf("%d ", &t);
    
    while (t--) {
        vector<int> a;
        string input;
        getline(cin, input);
        stringstream ss(input);
        int number;
        
        while (ss >> number) {
            a.push_back(number);
        }

        Solution obj;
        vector<string> v = obj.possibleWords(a);
        sort(v.begin(), v.end());
        
        for (const string &word : v) {
            cout << word << " ";
        }
        cout << endl << "~" << endl;
    }
    return 0;
}
