// Given k sorted arrays arranged in the form of a matrix of size k * k. The task is to merge them into one sorted array. Return the merged sorted array ( as a pointer to the merged sorted arrays in cpp, as an ArrayList in java, and list in python).
//
#include <vector>
#include <queue>
using namespace std;

class Solution {
public:
    // Function to merge k sorted arrays.
    vector<int> mergeKArrays(vector<vector<int>> arr, int K) {
        // Min-heap to store the elements along with array and index positions
        priority_queue<pair<int, pair<int, int>>, vector<pair<int, pair<int, int>>>, greater<>> minHeap;

        // Step 1: Insert the first element of each array into the heap
        for (int i = 0; i < K; i++) {
            minHeap.push({arr[i][0], {i, 0}});
        }

        // Resultant merged array
        vector<int> result;

        // Step 2: Process the heap
        while (!minHeap.empty()) {
            auto current = minHeap.top();
            minHeap.pop();

            int value = current.first;
            int arrayIndex = current.second.first;
            int elementIndex = current.second.second;

            // Add the smallest element to the result
            result.push_back(value);

            // If there are more elements in the array, insert the next element
            if (elementIndex + 1 < K) {
                minHeap.push({arr[arrayIndex][elementIndex + 1], {arrayIndex, elementIndex + 1}});
            }
        }

        return result;
    }
};

