//The stock span problem is a financial problem where we have a series of daily price quotes for a stock and we need to calculate the span of stock price for all days. The span arr[i] of the stocks price on a given day i is defined as the maximum number of consecutive days just before the given day, for which the price of the stock on the given day is less than or equal to its price on the current day#include <vector>
#include <stack>
using namespace std;

class Solution {
public:
    // Function to calculate the span of stockâ€™s price for all n days.
    vector<int> calculateSpan(vector<int>& arr) {
        int n = arr.size();
        vector<int> span(n); // Result vector to store span for each day
        stack<int> st; // Stack to store indices of the days

        for (int i = 0; i < n; i++) {
            // Pop elements from the stack while the current price is greater
            // or equal to the price at indices stored in the stack
            while (!st.empty() && arr[st.top()] <= arr[i]) {
                st.pop();
            }

            // If the stack is empty, all previous prices are smaller
            span[i] = (st.empty()) ? (i + 1) : (i - st.top());

            // Push current day index to the stack
            st.push(i);
        }

        return span;
    }
};
