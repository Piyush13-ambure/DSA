//The teacher gives a mental ability question to Raju. The question is as follows:-

//Raju is in an elevator. Given by his teacher is an array of size N which denotes the number of floors and has a 1 based indexing. The elevator starts from the ground and moves up and down, X and Y floors respectively. There is a code used in the elevator according to which it moves up X floors given at odd indexes of the array and moves down Y floors given at even indexes of the array. He is asked to go to the highest floor possible. Help him to sort the array such that he reaches the highest floor after traversing the whole array from starting till the end, without skipping any index.

//He always prefers to move more number of floors up and less number of floors down. Once he gets into the elevator, the elevator should not reach the ground again, if it does return -1.

#include <algorithm>
#include <vector>
using namespace std;

class Solution {
public:
    // Function to find the minimum number of platforms required
    int findPlatform(vector<int>& arr, vector<int>& dep) {
        // Sort both the arrival and departure times
        sort(arr.begin(), arr.end());
        sort(dep.begin(), dep.end());

        int n = arr.size();
        int platforms_needed = 0, max_platforms = 0;
        int i = 0, j = 0;

        // Use two pointers to traverse arrival and departure arrays
        while (i < n && j < n) {
            // If a train arrives before or when the previous one departs
            if (arr[i] <= dep[j]) {
                platforms_needed++; // A new platform is needed
                i++;
            } else { 
                // If a train departs, reduce the count of platforms needed
                platforms_needed--;
                j++;
            }
            // Update the maximum platforms needed
            max_platforms = max(max_platforms, platforms_needed);
        }

        return max_platforms;
    }
};
