//Given an integer array arr[]. Find the number of triangles that can be formed with three different array elements as lengths of three sides of the triangle. 

//A triangle with three given sides is only possible if sum of any two sides is always greater than the third side.#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

class Solution {
public:
    // Function to count the number of possible triangles.
    int countTriangles(vector<int>& arr) {
        int n = arr.size();
        if (n < 3) return 0; // Not enough sides to form a triangle

        // Sort the array
        sort(arr.begin(), arr.end());

        int count = 0;

        // Fix the third side (largest side of the triangle)
        for (int i = n - 1; i >= 2; i--) {
            int left = 0, right = i - 1;

            // Use two pointers to find pairs of sides
            while (left < right) {
                if (arr[left] + arr[right] > arr[i]) {
                    // If arr[left] + arr[right] > arr[i], then all elements
                    // between left and right can form a triangle with arr[i]
                    count += (right - left);
                    right--;
                } else {
                    // Otherwise, increase the left pointer
                    left++;
                }
            }
        }

        return count;
    }
};

int main() {
    Solution sol;
    int n;
    cout << "Enter the number of elements in the array: ";
    cin >> n;

    vector<int> arr(n);
    cout << "Enter the elements of the array: ";
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }

    int result = sol.countTriangles(arr);
    cout << "Number of triangles that can be formed: " << result << endl;

    return 0;
}
